"""
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
"""
def fib():
    """ Yield the next value of the Fibonacci sequence.  
    a,b = 0,1
    while True:
        yield a
        a, b = b, a + b

li = []
for index, fibonacci_number in zip(range(4000000), fib()):  # Arbitrailiy large range number, find a better way.
    if fibonacci_number > 4000000:
        break
    if fibonacci_number % 2 == 0:
       li.append(fibonacci_number)

print(sum(li))

# Alternate solution

def even(seq):
    """ Create a generator of only even numbers from the sequence """
    for number in seq:
        if not number % 2:
            yield number

def under_4_million(seq):
    """ Generator that stops at a given value """
    for number in seq:
        if number > 4000000:
            break
        yield number  

print(sum(even(under_4_million(fib()))))

